# -*- coding: utf-8 -*-
"""FINAL_PROJECT31

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cD0rU4PXo98KBoYtfMugKnwEigcdlv69
"""

# Install required libraries
!pip install pandas numpy matplotlib seaborn pydeck

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pydeck as pdk

# Documentation String
"""
Name: Your Name
CS230: Section XXX
Data: Skyscrapers Dataset from Kaggle
URL: Link to your web application on Streamlit Cloud (if posted)
Description:
This program analyzes the distribution and characteristics of skyscrapers around the world. It includes interactive visualizations and maps to explore the data.
"""

# Upload and load the dataset
from google.colab import files
uploaded = files.upload()
df = pd.read_csv('skyscrapers.csv', nrows=1000)  # Adjust the filename if necessary

# Display the first few rows to understand the structure of the dataset
print(df.head())

# Display the column names to check for any discrepancies
print(df.columns)

# Clean the data [DA1]
df.dropna(inplace=True)

# Function with two or more parameters, one of which has a default value [PY1]
def filter_data(df, country=None, city=None):
    if country:
        df = df[df['location.country'] == country]
    if city:
        df = df[df['location.city'] == city]
    return df

# Function that returns more than one value [PY2]
def get_top_skyscrapers(df, top_n=10):
    top_skyscrapers = df.nlargest(top_n, 'statistics.height')
    return top_skyscrapers['name'].tolist(), top_skyscrapers['statistics.height'].tolist()

# Error checking with try/except [PY3]
try:
    # List comprehension [PY4]
    countries = [country for country in df['location.country'].unique()]
except Exception as e:
    print(f"Error: {e}")

# Dictionary where you write code to access its keys, values, or items [PY5]
city_dict = dict(zip(df['location.city'].value_counts().index, df['location.city'].value_counts().values))

# Bar Chart [VIZ1]
plt.figure(figsize=(10, 6))
country_counts = df['location.country'].value_counts()
country_counts.plot(kind='bar', color='skyblue')
plt.title('Number of Skyscrapers by Country')
plt.xlabel('Country')
plt.ylabel('Number of Skyscrapers')
plt.show()

# Pie Chart [VIZ2]
top_skyscrapers, top_heights = get_top_skyscrapers(df, top_n=10)
plt.figure(figsize=(8, 8))
plt.pie(top_heights, labels=top_skyscrapers, autopct='%1.1f%%', colors=sns.color_palette('pastel'))
plt.title('Top 10 Skyscrapers by Height')
plt.show()

# Line Chart [VIZ3] (Assuming we have a 'status.completed.year' column in the dataset)
if 'status.completed.year' in df.columns:
    plt.figure(figsize=(10, 6))
    year_counts = df['status.completed.year'].value_counts().sort_index()
    year_counts.plot(kind='line', marker='o', color='green')
    plt.title('Construction of Skyscrapers Over Time')
    plt.xlabel('Year')
    plt.ylabel('Number of Skyscrapers')
    plt.show()

# Map with PyDeck [MAP]
layer = pdk.Layer(
    'ScatterplotLayer',
    df,
    get_position='[location.longitude, location.latitude]',
    get_radius=100,
    get_color=[255, 0, 0],
    pickable=True
)
view_state = pdk.ViewState(
    latitude=df['location.latitude'].mean(),
    longitude=df['location.longitude'].mean(),
    zoom=4
)
r = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip={"text": "{name}\n{location.city}"})
r.to_html('map.html')

from google.colab import files
files.download('map.html')

# Data Analysis Capabilities

# Sort data in ascending or descending order [DA2]
sorted_df = df.sort_values(by='statistics.height', ascending=True)

# Find Top largest or smallest values of a column [DA3]
top_skyscrapers_by_height = df.nlargest(10, 'statistics.height')

# Filter data by one condition [DA4]
filtered_by_country = df[df['location.country'] == countries[0]]  # Example: filter by the first country

# Filter data by two or more conditions with AND or OR [DA5]
filtered_by_conditions = df[(df['location.country'] == countries[0]) & (df['location.city'].isin(top_skyscrapers))]

# Analyze data with pivot tables [DA6]
pivot_table = pd.pivot_table(df, values='statistics.height', index='location.country', columns='location.city', aggfunc='mean')

# Add/drop/select/create new/group columns [DA7]
df['Country_City'] = df['location.country'] + ', ' + df['location.city']

# Iterate through rows of a DataFrame with iterrows() [DA8]
for index, row in df.iterrows():
    pass  # Example: print(row['name'])

# Add a new column or perform calculations on DataFrame columns [DA9]
df['Height_meters'] = df['statistics.height'] * 0.3048  # Assuming height is in feet

print("Data Analysis Completed")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pydeck as pdk
import streamlit as st

# Documentation String
"""
Name: Your Name
CS230: Section XXX
Data: Skyscrapers Dataset from Kaggle
URL: Link to your web application on Streamlit Cloud (if posted)
Description:
This program analyzes the distribution and characteristics of skyscrapers around the world. It includes interactive visualizations and maps to explore the data.
"""

# Load the dataset
df = pd.read_csv('skyscrapers.csv', nrows=1000)  # Adjust the filename if necessary

# Clean the data [DA1]
df.dropna(inplace=True)

# Function with two or more parameters, one of which has a default value [PY1]
def filter_data(df, status=None):
    if status:
        df = df[df['status.current'] == status]
    return df

# Function that returns more than one value [PY2]
def get_top_skyscrapers(df, top_n=10):
    top_skyscrapers = df.nlargest(top_n, 'statistics.height')
    return top_skyscrapers['statistics.height'].tolist(), top_skyscrapers['statistics.height'].tolist()

# Error checking with try/except [PY3]
try:
    # List comprehension [PY4]
    statuses = [status for status in df['status.current'].unique()]
except Exception as e:
    st.error(f"Error: {e}")

# Dictionary where you write code to access its keys, values, or items [PY5]
status_dict = dict(zip(df['status.current'].value_counts().index, df['status.current'].value_counts().values))

# Streamlit UI
st.title('Skyscrapers Around the World')

# Streamlit widgets [ST1], [ST2], [ST3]
selected_status = st.selectbox('Select a Status', options=statuses)
top_n = st.slider('Select Top N Skyscrapers', min_value=5, max_value=20, value=10)

# Filter data based on user input
filtered_df = filter_data(df, status=selected_status)

# Bar Chart [VIZ1]
st.subheader('Number of Skyscrapers by Status')
status_counts = df['status.current'].value_counts()
fig, ax = plt.subplots()
status_counts.plot(kind='bar', color='skyblue', ax=ax)
ax.set_title('Number of Skyscrapers by Status')
ax.set_xlabel('Status')
ax.set_ylabel('Number of Skyscrapers')
st.pyplot(fig)

# Pie Chart [VIZ2]
st.subheader('Top Skyscrapers by Height')
top_skyscrapers, top_heights = get_top_skyscrapers(df, top_n=top_n)
fig, ax = plt.subplots()
ax.pie(top_heights, labels=top_skyscrapers, autopct='%1.1f%%', colors=sns.color_palette('pastel'))
ax.set_title(f'Top {top_n} Skyscrapers by Height')
st.pyplot(fig)

# Line Chart [VIZ3] (Assuming we have a 'status.completed.year' column in the dataset)
if 'status.completed.year' in df.columns:
    st.subheader('Construction of Skyscrapers Over Time')
    year_counts = df['status.completed.year'].value_counts().sort_index()
    fig, ax = plt.subplots()
    year_counts.plot(kind='line', marker='o', color='green', ax=ax)
    ax.set_title('Construction of Skyscrapers Over Time')
    ax.set_xlabel('Year')
    ax.set_ylabel('Number of Skyscrapers')
    st.pyplot(fig)

# Map with PyDeck [MAP]
st.subheader('Map of Skyscrapers')
layer = pdk.Layer(
    'ScatterplotLayer',
    filtered_df,
    get_position='[location.longitude, location.latitude]',
    get_radius=100,
    get_color=[255, 0, 0],
    pickable=True
)
view_state = pdk.ViewState(
    latitude=df['location.latitude'].mean(),
    longitude=df['location.longitude'].mean(),
    zoom=4
)
r = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip={"text": "{name}\n{location.city}"})
st.pydeck_chart(r)

# Data Analysis Capabilities

# Sort data in ascending or descending order [DA2]
sorted_df = df.sort_values(by='statistics.height', ascending=True)

# Find Top largest or smallest values of a column [DA3]
top_skyscrapers_by_height = df.nlargest(10, 'statistics.height')

# Filter data by one condition [DA4]
filtered_by_status = df[df['status.current'] == selected_status]

# Filter data by two or more conditions with AND or OR [DA5]
filtered_by_conditions = df[(df['status.current'] == selected_status) & (df['statistics.height'] >= 500)]

# Analyze data with pivot tables [DA6]
pivot_table = pd.pivot_table(df, values='statistics.height', index='status.current', columns='statistics.rank', aggfunc='mean')

# Add/drop/select/create new/group columns [DA7]
df['Status_Rank'] = df['status.current'] + ', ' + df['statistics.rank'].astype(str)

# Iterate through rows of a DataFrame with iterrows() [DA8]
for index, row in df.iterrows():
    pass  # Example: print(row['name'])

# Add a new column or perform calculations on DataFrame columns [DA9]
df['Height_meters'] = df['statistics.height'] * 0.3048  # Assuming height is in feet

st.write("Data Analysis Completed")